import streamlit as st
from diffusers import DiffusionPipeline  
import torch  
import matplotlib.pyplot as plt  
from PIL import Image  
import io  

# Set Streamlit title
st.title("Stable Diffusion Image Generator")

# Streamlit sidebar for input parameters
st.sidebar.header("Input Settings")

# Text input for the prompt
prompt = st.sidebar.text_input("Prompt", "A vibrant sunset over the city skyline with silhouetted buildings.")

# Button to generate image
generate = st.sidebar.button("Generate Image")

# Initialize the base pipeline outside the button to avoid reloading the model every time
@st.cache_resource
def load_pipeline():
    # Load the pre-trained model using the 'stable-diffusion-xl-base-1.0' pipeline
    pipe = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-base-1.0", 
        torch_dtype=torch.float16,  
        use_safetensors=True,  
        variant="fp16"  
    )
    pipe.to("cuda")  
    return pipe

pipe = load_pipeline()

# Function to generate and display image
def generate_image(prompt):
    try:
        torch.cuda.empty_cache()
        
        images = pipe(prompt=prompt, height=512, width=512).images[0]
        
        buffer = io.BytesIO()
        images.save(buffer, format="PNG")
        buffer.seek(0)
        return Image.open(buffer)
    except RuntimeError as e:
        # Handle CUDA out-of-memory error
        if "out of memory" in str(e):
            st.error("CUDA out of memory. Try reducing image size or restart the application.")
        else:
            st.error(f"An error occurred: {str(e)}")

# If the generate button is pressed
if generate:
    st.subheader("Generated Image")
    # Generate and display image based on prompt
    generated_image = generate_image(prompt)
    if generated_image:
        st.image(generated_image, caption="Generated by Stable Diffusion", use_column_width=True)
